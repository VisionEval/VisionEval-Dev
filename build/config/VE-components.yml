# Identify VisionEval Components and Dependencies

Components:

# "Type: module" components are built and installed as R packages
# "Type: framework" works like a module, but is built first; also it has a different implied
#        documentation location
# The test script relative path is copied to the "test" environment under the module name
# The group captures the VE internal dependencies (see .travis.yml) but is unused
# Docs target is one (or a vector) of locations from which markdown files will be processed into PDFs
#   Build target PDFs will be placed in a name derived (for the framework) from the first element in the  Docs path,
#   and (for the modules) in a folder named after the module:
#       framework [Type]:
#       +api # contains any .md files found at the top level as PDFs
#       +function_docs # contains any .md files found in the indicated folder as PDFs
#       modules
#       + [ModuleName] # contains inst/module_docs as PDFs
  visioneval:
    Type: framework
    Path: sources/framework
    Test: { Script: tests/scripts/test.R, Group: 0 }
    CRAN: 
      - futile.logger
      - jsonlite
      - yaml
      - stringr
      - knitr
    BioC:
      - rhdf5
  VEModel: # End-user R API
    Type: module
    Path: sources/framework
    Test: { Script: tests/scripts/test.R, Group: 1 }
    CRAN:
      - futile.logger
      - jsonlite
      - yaml
      - stringr
      - R6
      - parallelly
      - future
      - future.callr
      - jrc
#    Github:
#      - anders-biostat/jrc
#    To build properly, need to do externals after creating ve.lib!
#    which requires a change to the Makefile sequencing.
#    The CRAN version may be sufficient
#  VEScenario:
#   Type: module
#   Path: sources/modules
#   Test: { Script: tests/scripts/test.R, Group: 1 }
#   CRAN:
#     - data.table
#     - future
#     - future.callr
#     - jsonlite

# Core Modules for building models

  VESimHouseholds:
    Type: module
    Path: sources/modules
    Test: { Script: tests/scripts/test.R, Group: 1 }
  VESimLandUseData:
    Type: module
    Path: sources/modules
    Test: { Script: tests/scripts/test.R, Group: 1 }
    CRAN:
      - stringr
      - tidycensus
  VESyntheticFirms:
    Type: module
    Path: sources/modules
    Test: { Script: tests/scripts/test.R, Group: 1 }
    CRAN:
      - reshape
  VETransportSupply:
    Type: module
    Path: sources/modules
    Test: { Script: tests/scripts/test.R, Group: 1 }
  VETransportSupplyUse:
    Type: module
    Path: sources/modules
    Test: { Script: tests/scripts/test.R, Group: 1 }

  VE2001NHTS:
    # VE2001NHTS is only used internally for estimating other models
    # Rethink how it is packaged and used for local re-estimation (future change)
    Type: module
    Path: sources/modules
    Test: { Script: tests/scripts/test.R, Group: 1 }
  VEHouseholdTravel:
    Type: module
    Path: sources/modules
    Test: { Script: tests/scripts/test.R, Group: 2 }
    CRAN:
      - filesstrings
      - data.table
      - pscl
    VE:
      - VE2001NHTS
  VEHouseholdVehicles:
    Type: module
    Path: sources/modules
    Test: { Script: tests/scripts/test.R, Group: 2 }
    CRAN:
      - ordinal
      - reshape2
    VE:
      - VE2001NHTS
  VELandUse:
    Type: module
    Path: sources/modules
    Test: { Script: tests/scripts/test.R, Group: 2 }
    CRAN:
      - fields
      - geosphere
    VE:
      - VE2001NHTS
      - VESimHouseholds
  VEPowertrainsAndFuels:
    Type: module
    Path: sources/modules
    Test: { Script: tests/scripts/test.R, Group: 3 }
    CRAN:
      - data.table
    VE:
      - VE2001NHTS
      - VEHouseholdTravel
  VESimLandUse:
    Type: module
    Path: sources/modules
    Test: { Script: tests/scripts/test.R, Group: 3 }
    CRAN:
      - plot3D
    VE:
      - VELandUse
      - VESimLandUseData
  VETravelPerformance:
    Type: module
    Path: sources/modules
    Test: { Script: tests/scripts/test.R, Group: 4 }
    CRAN:
      - filesstrings
      - stringr
      - dplyr
    VE:
      - VEHouseholdTravel
      - VEPowertrainsAndFuels
  VESimTransportSupply:
    Type: module
    Path: sources/modules
    Test: { Script: tests/scripts/test.R, Group: 4 }
    VE:
      - VESimLandUse
      - VETransportSupply

# Module / Model packages (include installable sample models)

# VERSPM:
#   Type: module
#   Path: sources/modules
#   Test: { Script: tests/scripts/test.R, Group: 2 }
#   # VERSPM has no package dependencies (only an installable model)
#   VE:
#      - # TODO: list all the packages used in VERSPM model
  VEState:
    Type: module
    Path: sources/modules
    Test: { Script: tests/scripts/test.R, Group: 2 }
    # VEState has no package dependencies (only an installable model)
    VE:
      - VEHouseholdTravel
      - VEHouseholdVehicles
      - VEPowertrainsAndFuels
      - VESimHouseholds
      - VESimLandUse
      - VESimTransportSupply
      - VETravelPerformance
  VETravelDemandMM:
    Type: module
    Path: sources/modules
    Test: { Script: tests/scripts/test.R, Group: 2 }
    CRAN:
      - dplyr
      - purrr
      - tidyr
      - splines
      - MASS
      - pscl
    VE:
      - VEHouseholdTravel
      - VEHouseholdVehicles
      - VELandUse
      - VEPowertrainsAndFuels
      - VESimHouseholds
      - VETransportSupply
      - VETravelPerformance
  VERPAT:
    Type: module
    Path: sources/modules
    Test: { Script: tests/scripts/test.R, Group: 3 }
    CRAN:
      - filesstrings
      - jsonlite
    VE:
      - VEHouseholdTravel
      - VEHouseholdVehicles
      - VELandUse
      - VESimHouseholds
      - VESyntheticFirms
      - VETransportSupply
      - VETransportSupplyUse

# "Type: test" components are copied verbatim to "src" environment under its name
# Need to rethink this...
#   Test_Data:
#     Type: test
#     Path: sources/modules

# VE NextGen does not install models, just an empty-ish "models" directory in runtime
  Readme-Models.md:
    # Explains how to install a model
    Type: model
    Path: sources/models

# "Type: model" components may have tests, and are copied to "models" folder of runtime under their name
# The test script relative path is copied to the "test" directory
# Model installation architecture is different in NextGen (installs models through packages)
#   VERPAT:
#     Type: model
#     Path: sources/models
#     Test: { Script: run_model.R, Group: 5 }
#   VERPAT_Scenarios:
#     Type: model
#     Path: sources/models
#   VERSPM:
#     Type: model
#     Path: sources/models
#     Test: { Script: Test1/run_model.R, Group: 5 }
#   VERSPM_MM:
#     Type: model
#     Path: sources/models
#     Test: { Script: Test1/run_model.R, Group: 5 }    
#   VERSPM-VehAdj:
#     Type: model
#     Path: sources/models
#     Test: { Script: Test1/run_model.R, Group: 5 }    
#   VERSPM_Scenarios:
#     Type: model
#     Path: sources/models
#   VE-State:
#     Type: model
#     Path: sources/models
#   VE-State-Staged:
#     Type: model
#     Path: sources/models

# "Type: runtime" components are copied recursively to the runtime root
# Their name is used to find them under the Path but unlike "script" components
#   no subdirectory is created

  runtime:
    Type: runtime
    Path: sources # copies sources/runtime/* to ve.runtime recursively

# "Type: script" components are copied to the runtime root under their name
  LICENSE:
    Type: script
    Path: "."
  tools:
    Type: script
    Path: sources
    CRAN:
      - futile.logger                # Review continued need for all these
      - import
      - jsonlite
  walkthrough:
    Type: script
    Path: sources/framework/VEModel/inst
  test.r: # VEModel tests (sample code)
    Type: script
    Target: tools/tests/VEModel
    Path: sources/framework/VEModel/tests
  test_run.r: # visioneval tests (sample code)
    Type: script
    Target: tools/tests/visioneval
    Path: sources/framework/visioneval/tests
  api:                               # "package" for 'docs' type is the last element (can be file name)
    Type: docs
    Path: "."                        # base directory below root to gather docs
    Target: visioneval/api           # output path relative to "ve.docs"
  RStudio.md:
    Type: docs
    Path: build
    Target: visioneval
